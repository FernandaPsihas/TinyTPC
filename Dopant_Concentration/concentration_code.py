# -*- coding: utf-8 -*-
"""Concentration code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LA0avfQfsQdeKsimYSeeN9yV9TXxDsi9

#**The ppm Concentration of a Dopant Based on the Mass of Added Mixture**
Created by Eunice Beato


FermiLab Internship working with the low-energy LAr-TPC group

GEM Fellow
"""

# RUN THE "!PIP INSTALL IPYWIDGETS", BELOW IF DONT HAVE THAT PACKAGE IN PYTHON ENVIRONMENT

pip install ipywidgets

import ipywidgets as widgets
from IPython.display import display
from IPython.display import HTML
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, interactive, fixed, interact_manual
from IPython.display import clear_output
from ipywidgets import HBox, Label, Layout

#1st Approach using mole fraction
def Concentration(LArlevel, Masschange, XOGConc, ArOGConc,Xmolweight):
    #the code below calcualte the starting mass of the LAr in the cryostat before the mixture is added
    r=38 #radius of the cryostat in cm
    V= np.pi*(38**2)*LArlevel #The LArlevel should be in centimeter
    D= 1.4 #units = g/ml #density of argon
    M_LAr= D * V
    print("Starting Mass of LAr =", M_LAr, "grams")

    #the code below is going to calculate the mass of the dopant(X) that goes into the LAr Cryostat
    X_in_mass = Masschange * XOGConc
    Ar_in_mass = Masschange * ArOGConc

    #Finding the ratio
    M_LAr_new = M_LAr + Ar_in_mass # the combined mass of the OG LAr and the added one from the mixture
    Ratio = X_in_mass / M_LAr_new
    print("For every 1 gram of Argon ther is ", Ratio, "grams of X")
    
    random = (10**6 *X_in_mass) / (X_in_mass + M_LAr_new)
    print("random =", random)

    #Conversion to ppm
    Molecular_Weight_Ar = 39.948 #g/mol
    mole_fraction_X= (X_in_mass / Xmolweight)/ ((X_in_mass / Xmolweight)+ (M_LAr_new / Molecular_Weight_Ar))
    ppm= (mole_fraction_X  * 10**6)
    print("X Concentration:", ppm, "ppm")


# #2nd Approach:

# def Concentration(LArlevel, Masschange, XOGConc, ArOGConc,Xmolweight):
#     #the code below calcualte the starting mass of the LAr in the cryostat before the mixture is added
#     r=38 #radius of the cryostat in cm
#     V= np.pi*(38**2)*LArlevel #The LArlevel should be in centimeter
#     D= 1.4 #units = g/ml #density of argon
#     M_LAr= D * V
#     print("Starting Mass of LAr =", M_LAr, "grams")

#     #the code below is going to calculate the mass of the dopant(X) that goes into the LAr Cryostat
#     X_in_mass = Masschange * XOGConc
#     Ar_in_mass = Masschange * ArOGConc

#     #Finding the ratio
#     M_LAr_new = M_LAr + Ar_in_mass
#     Ratio = X_in_mass / M_LAr_new
#     print("For every 1 gram of Argon ther is ", Ratio, "grams of X")

#     #Conversion to ppm
#     Armolweight = 39.948 #g/mol
#     #Molecular_Weight_X= 28.54 #g/mol
#     Xppm= X_in_mass / (M_LAr_new * (10**-6) * (Xmolweight / Armolweight))
#     print("X is present in,", Xppm, "ppm")

button = widgets.Button(description="Calculate Concentration", layout=Layout(width='20%', height='40px'))

LArlevel= widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)


Masschange = widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)

XOGConc = widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)

ArOGConc = widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)

Xmolweight = widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)

output = widgets.Output()

display(widgets.HBox([Label('Starting LAr Level (cm):'), LArlevel]))
display(widgets.HBox([Label('Change in Mass (g):'), Masschange]))
display(widgets.HBox([Label('X Concentration (in mixture)'), XOGConc]))
display(widgets.HBox([Label('Argon Concentration (in mixture)'), ArOGConc]))
display(widgets.HBox([Label('Molecular Weight of X (g/mol)'), Xmolweight]))
display(button, output)

def on_LArlevel_change(change):
    with output:
        print(change['new'])
def on_Masschange_change(change):
    with output:
        print(change['new'])
def on_XOGConc_change(change):
    with output:
        print(change['new'])
def on_ArOGConc_change(change):
    with output:
        print(change['new'])
def on_Xmolweight_change(change):
    with output:
        print(change['new'])

def on_button_clicked(b):
    with output:
        clear_output()
        Concentration(LArlevel.value, Masschange.value, XOGConc.value, ArOGConc.value, Xmolweight.value)

button.on_click(on_button_clicked)

