# -*- coding: utf-8 -*-
"""Concentration code - ppm to mass change

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kRKvaP8J1jkY---yMLuXgFLmbO1r-6vt

#**Mass of Mixture Needed to Aquire a Specific Dopant ppm Concentration**
Created by Eunice Beato


FermiLab Internship working with the low-energy LAr-TPC group

GEM Fellow
"""

import ipywidgets as widgets
from IPython.display import display
from IPython.display import HTML
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, interactive, fixed, interact_manual
from IPython.display import clear_output
from ipywidgets import HBox, Label, Layout

def Mass_Change(LArlevel, Xppm, XOGConc, ArOGConc, Xmolweight):
    #the code below calcualte the starting mass of the LAr in the cryostat before the mixture is added
    r=38 #radius of the cryostat in cm
    V= np.pi*(38**2)*LArlevel #The LArlevel should be in centimeter
    D= 1.4 #units = g/ml #density of argon
    M_LAr= D * V
    print("Starting Mass of LAr =", M_LAr, "grams")

    Armolweight = 39.948 #g/mol

    #solving for thed change in mass needed for a certain X ppm
    Mass= -(Xppm * Xmolweight *M_LAr) / ((Xppm * XOGConc * Armolweight) + (Xppm * Xmolweight * ArOGConc) - (1000000 * XOGConc * Armolweight))
    print("To get a", Xppm, "ppm of X, you need to put in,", Mass, "grams of the mixture")
    print("Change in Mass:",Mass, "grams")

    #convert to pounds
    pounds = .0022 * Mass
    print(pounds, "lbs")

# def Mass_Change(LArlevel, Xppm, XOGConc, ArOGConc, Xmolweight):
#     #the code below calcualte the starting mass of the LAr in the cryostat before the mixture is added
#     r=38 #radius of the cryostat in cm
#     V= np.pi*(38**2)*LArlevel #The LArlevel should be in centimeter
#     D= 1.4 #units = g/ml #density of argon
#     M_LAr= D * V
#     print("Starting Mass of LAr =", M_LAr, "grams")

#     Armolweight = 39.948 #g/mol

#     #solving for thed change in mass needed for a certain X ppm
#     fraction = (10**6 * XOGConc* Armolweight)/ (Xppm * Xmolweight)
#     Mass= (M_LAr) / ( fraction - ArOGConc)
#     print("To get a", Xppm, "ppm of X, you need to put in,", Mass, "grams of the mixture")
#     print("Change in Mass:",Mass, "grams")

#     #convert to pounds
#     pounds = .0022 * Mass
#     print(pounds, "lbs")

button = widgets.Button(description="Calculate Change in Mass", layout=Layout(width='20%', height='40px'))

LArlevel= widgets.FloatText(
    value= 0,
    #description = 'Starting LAr level:',
    disabled=False,
    continuous_update=False)


Xppm = widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)

XOGConc = widgets.FloatText(
    value= 0,
    #description= 'Initial X concentration (in mixture):',
    disabled=False,
    continuous_update=False)

ArOGConc = widgets.FloatText(
    value= 0,
    #description= 'Initial Argon concentration (in mixture):',
    disabled=False,
    continuous_update=False)

Xmolweight = widgets.FloatText(
    value= 0,
    disabled=False,
    continuous_update=False)

output = widgets.Output()

display(widgets.HBox([Label('Starting LAr Level (cm):'), LArlevel]))
display(widgets.HBox([Label('Desired ppm:'), Xppm]))
display(widgets.HBox([Label('X Concentration (in mixture)'), XOGConc]))
display(widgets.HBox([Label('Argon Concentration (in mixture)'), ArOGConc]))
display(widgets.HBox([Label('Molecular Weight of X (g/mol)'), Xmolweight]))
#display(LArlevel, Masschange, XOGConc, ArOGConc)
display(button, output)

def on_LArlevel_change(change):
    with output:
        print(change['new'])
def on_Xppm_change(change):
    with output:
        print(change['new'])
def on_XOGConc_change(change):
    with output:
        print(change['new'])
def on_ArOGConc_change(change):
    with output:
        print(change['new'])
def on_Xmolweight_change(change):
    with output:
        print(change['new'])

def on_button_clicked(b):
    with output:
        clear_output()
        Mass_Change(LArlevel.value, Xppm.value, XOGConc.value, ArOGConc.value, Xmolweight.value)

button.on_click(on_button_clicked)
